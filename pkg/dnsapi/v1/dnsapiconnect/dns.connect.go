// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dnsapi/v1/dns.proto

package dnsapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Open-Taxi-Community/open-taxi-dns/pkg/dnsapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DnsServiceName is the fully-qualified name of the DnsService service.
	DnsServiceName = "dnsapi.v1.DnsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DnsServiceAddDomainProcedure is the fully-qualified name of the DnsService's AddDomain RPC.
	DnsServiceAddDomainProcedure = "/dnsapi.v1.DnsService/AddDomain"
	// DnsServiceGetDomainProcedure is the fully-qualified name of the DnsService's GetDomain RPC.
	DnsServiceGetDomainProcedure = "/dnsapi.v1.DnsService/GetDomain"
	// DnsServiceRemoveDomainProcedure is the fully-qualified name of the DnsService's RemoveDomain RPC.
	DnsServiceRemoveDomainProcedure = "/dnsapi.v1.DnsService/RemoveDomain"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	dnsServiceServiceDescriptor            = v1.File_dnsapi_v1_dns_proto.Services().ByName("DnsService")
	dnsServiceAddDomainMethodDescriptor    = dnsServiceServiceDescriptor.Methods().ByName("AddDomain")
	dnsServiceGetDomainMethodDescriptor    = dnsServiceServiceDescriptor.Methods().ByName("GetDomain")
	dnsServiceRemoveDomainMethodDescriptor = dnsServiceServiceDescriptor.Methods().ByName("RemoveDomain")
)

// DnsServiceClient is a client for the dnsapi.v1.DnsService service.
type DnsServiceClient interface {
	// Add a new domain
	//
	// Adding a new domain will push the domain to the driver server
	// compliance blockchain. Other driver servers will then be able
	// to resolve the domain and make requests to the domain to begin
	// the compliance process.
	AddDomain(context.Context, *connect.Request[v1.AddDomainRequest]) (*connect.Response[v1.AddDomainResponse], error)
	// Get a domain
	//
	// This is used to check if a domain is in the OpenTaxi DNS
	GetDomain(context.Context, *connect.Request[v1.GetDomainRequest]) (*connect.Response[v1.GetDomainResponse], error)
	// Remove a domain
	//
	// This removes a domain from the OpenTaxi DNS
	RemoveDomain(context.Context, *connect.Request[v1.RemoveDomainRequest]) (*connect.Response[v1.RemoveDomainResponse], error)
}

// NewDnsServiceClient constructs a client for the dnsapi.v1.DnsService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDnsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DnsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dnsServiceClient{
		addDomain: connect.NewClient[v1.AddDomainRequest, v1.AddDomainResponse](
			httpClient,
			baseURL+DnsServiceAddDomainProcedure,
			connect.WithSchema(dnsServiceAddDomainMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDomain: connect.NewClient[v1.GetDomainRequest, v1.GetDomainResponse](
			httpClient,
			baseURL+DnsServiceGetDomainProcedure,
			connect.WithSchema(dnsServiceGetDomainMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeDomain: connect.NewClient[v1.RemoveDomainRequest, v1.RemoveDomainResponse](
			httpClient,
			baseURL+DnsServiceRemoveDomainProcedure,
			connect.WithSchema(dnsServiceRemoveDomainMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// dnsServiceClient implements DnsServiceClient.
type dnsServiceClient struct {
	addDomain    *connect.Client[v1.AddDomainRequest, v1.AddDomainResponse]
	getDomain    *connect.Client[v1.GetDomainRequest, v1.GetDomainResponse]
	removeDomain *connect.Client[v1.RemoveDomainRequest, v1.RemoveDomainResponse]
}

// AddDomain calls dnsapi.v1.DnsService.AddDomain.
func (c *dnsServiceClient) AddDomain(ctx context.Context, req *connect.Request[v1.AddDomainRequest]) (*connect.Response[v1.AddDomainResponse], error) {
	return c.addDomain.CallUnary(ctx, req)
}

// GetDomain calls dnsapi.v1.DnsService.GetDomain.
func (c *dnsServiceClient) GetDomain(ctx context.Context, req *connect.Request[v1.GetDomainRequest]) (*connect.Response[v1.GetDomainResponse], error) {
	return c.getDomain.CallUnary(ctx, req)
}

// RemoveDomain calls dnsapi.v1.DnsService.RemoveDomain.
func (c *dnsServiceClient) RemoveDomain(ctx context.Context, req *connect.Request[v1.RemoveDomainRequest]) (*connect.Response[v1.RemoveDomainResponse], error) {
	return c.removeDomain.CallUnary(ctx, req)
}

// DnsServiceHandler is an implementation of the dnsapi.v1.DnsService service.
type DnsServiceHandler interface {
	// Add a new domain
	//
	// Adding a new domain will push the domain to the driver server
	// compliance blockchain. Other driver servers will then be able
	// to resolve the domain and make requests to the domain to begin
	// the compliance process.
	AddDomain(context.Context, *connect.Request[v1.AddDomainRequest]) (*connect.Response[v1.AddDomainResponse], error)
	// Get a domain
	//
	// This is used to check if a domain is in the OpenTaxi DNS
	GetDomain(context.Context, *connect.Request[v1.GetDomainRequest]) (*connect.Response[v1.GetDomainResponse], error)
	// Remove a domain
	//
	// This removes a domain from the OpenTaxi DNS
	RemoveDomain(context.Context, *connect.Request[v1.RemoveDomainRequest]) (*connect.Response[v1.RemoveDomainResponse], error)
}

// NewDnsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDnsServiceHandler(svc DnsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dnsServiceAddDomainHandler := connect.NewUnaryHandler(
		DnsServiceAddDomainProcedure,
		svc.AddDomain,
		connect.WithSchema(dnsServiceAddDomainMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dnsServiceGetDomainHandler := connect.NewUnaryHandler(
		DnsServiceGetDomainProcedure,
		svc.GetDomain,
		connect.WithSchema(dnsServiceGetDomainMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dnsServiceRemoveDomainHandler := connect.NewUnaryHandler(
		DnsServiceRemoveDomainProcedure,
		svc.RemoveDomain,
		connect.WithSchema(dnsServiceRemoveDomainMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/dnsapi.v1.DnsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DnsServiceAddDomainProcedure:
			dnsServiceAddDomainHandler.ServeHTTP(w, r)
		case DnsServiceGetDomainProcedure:
			dnsServiceGetDomainHandler.ServeHTTP(w, r)
		case DnsServiceRemoveDomainProcedure:
			dnsServiceRemoveDomainHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDnsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDnsServiceHandler struct{}

func (UnimplementedDnsServiceHandler) AddDomain(context.Context, *connect.Request[v1.AddDomainRequest]) (*connect.Response[v1.AddDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnsapi.v1.DnsService.AddDomain is not implemented"))
}

func (UnimplementedDnsServiceHandler) GetDomain(context.Context, *connect.Request[v1.GetDomainRequest]) (*connect.Response[v1.GetDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnsapi.v1.DnsService.GetDomain is not implemented"))
}

func (UnimplementedDnsServiceHandler) RemoveDomain(context.Context, *connect.Request[v1.RemoveDomainRequest]) (*connect.Response[v1.RemoveDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnsapi.v1.DnsService.RemoveDomain is not implemented"))
}
