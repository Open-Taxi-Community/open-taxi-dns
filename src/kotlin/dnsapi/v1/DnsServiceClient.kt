// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: dnsapi/v1/dns.proto
//
package dnsapi.v1

import com.connectrpc.Headers
import com.connectrpc.MethodSpec
import com.connectrpc.ProtocolClientInterface
import com.connectrpc.ResponseMessage
import com.connectrpc.StreamType

/**
 *  DNS service
 *
 *  The DNS service is used to interact with the OpenTaxi DNS server.
 */
public class DnsServiceClient(
  private val client: ProtocolClientInterface,
) : DnsServiceClientInterface {
  /**
   *  Add a new domain
   *
   *  Adding a new domain will push the domain to the driver server
   *  compliance blockchain. Other driver servers will then be able
   *  to resolve the domain and make requests to the domain to begin
   *  the compliance process.
   */
  override suspend fun addDomain(request: Dns.AddDomainRequest, headers: Headers):
      ResponseMessage<Dns.AddDomainResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "dnsapi.v1.DnsService/AddDomain",
      dnsapi.v1.Dns.AddDomainRequest::class,
      dnsapi.v1.Dns.AddDomainResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Get a domain
   *
   *  This is used to check if a domain is in the OpenTaxi DNS
   */
  override suspend fun getDomain(request: Dns.GetDomainRequest, headers: Headers):
      ResponseMessage<Dns.GetDomainResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "dnsapi.v1.DnsService/GetDomain",
      dnsapi.v1.Dns.GetDomainRequest::class,
      dnsapi.v1.Dns.GetDomainResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Remove a domain
   *
   *  This removes a domain from the OpenTaxi DNS
   */
  override suspend fun removeDomain(request: Dns.RemoveDomainRequest, headers: Headers):
      ResponseMessage<Dns.RemoveDomainResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "dnsapi.v1.DnsService/RemoveDomain",
      dnsapi.v1.Dns.RemoveDomainRequest::class,
      dnsapi.v1.Dns.RemoveDomainResponse::class,
      StreamType.UNARY,
    ),
  )

}
