// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: dnsapi/v1/dns.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// DNS service
///
/// The DNS service is used to interact with the OpenTaxi DNS server.
public protocol Dnsapi_V1_DnsServiceClientInterface: Sendable {

    /// Add a new domain
    ///
    /// Adding a new domain will push the domain to the driver server
    /// compliance blockchain. Other driver servers will then be able
    /// to resolve the domain and make requests to the domain to begin
    /// the compliance process.
    @discardableResult
    func `addDomain`(request: Dnsapi_V1_AddDomainRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Dnsapi_V1_AddDomainResponse>) -> Void) -> Connect.Cancelable

    /// Add a new domain
    ///
    /// Adding a new domain will push the domain to the driver server
    /// compliance blockchain. Other driver servers will then be able
    /// to resolve the domain and make requests to the domain to begin
    /// the compliance process.
    @available(iOS 13, *)
    func `addDomain`(request: Dnsapi_V1_AddDomainRequest, headers: Connect.Headers) async -> ResponseMessage<Dnsapi_V1_AddDomainResponse>

    /// Get a domain
    ///
    /// This is used to check if a domain is in the OpenTaxi DNS
    @discardableResult
    func `getDomain`(request: Dnsapi_V1_GetDomainRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Dnsapi_V1_GetDomainResponse>) -> Void) -> Connect.Cancelable

    /// Get a domain
    ///
    /// This is used to check if a domain is in the OpenTaxi DNS
    @available(iOS 13, *)
    func `getDomain`(request: Dnsapi_V1_GetDomainRequest, headers: Connect.Headers) async -> ResponseMessage<Dnsapi_V1_GetDomainResponse>

    /// Remove a domain
    ///
    /// This removes a domain from the OpenTaxi DNS
    @discardableResult
    func `removeDomain`(request: Dnsapi_V1_RemoveDomainRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Dnsapi_V1_RemoveDomainResponse>) -> Void) -> Connect.Cancelable

    /// Remove a domain
    ///
    /// This removes a domain from the OpenTaxi DNS
    @available(iOS 13, *)
    func `removeDomain`(request: Dnsapi_V1_RemoveDomainRequest, headers: Connect.Headers) async -> ResponseMessage<Dnsapi_V1_RemoveDomainResponse>
}

/// Concrete implementation of `Dnsapi_V1_DnsServiceClientInterface`.
public final class Dnsapi_V1_DnsServiceClient: Dnsapi_V1_DnsServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `addDomain`(request: Dnsapi_V1_AddDomainRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Dnsapi_V1_AddDomainResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/dnsapi.v1.DnsService/AddDomain", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `addDomain`(request: Dnsapi_V1_AddDomainRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dnsapi_V1_AddDomainResponse> {
        return await self.client.unary(path: "/dnsapi.v1.DnsService/AddDomain", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getDomain`(request: Dnsapi_V1_GetDomainRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Dnsapi_V1_GetDomainResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/dnsapi.v1.DnsService/GetDomain", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getDomain`(request: Dnsapi_V1_GetDomainRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dnsapi_V1_GetDomainResponse> {
        return await self.client.unary(path: "/dnsapi.v1.DnsService/GetDomain", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `removeDomain`(request: Dnsapi_V1_RemoveDomainRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Dnsapi_V1_RemoveDomainResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/dnsapi.v1.DnsService/RemoveDomain", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `removeDomain`(request: Dnsapi_V1_RemoveDomainRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Dnsapi_V1_RemoveDomainResponse> {
        return await self.client.unary(path: "/dnsapi.v1.DnsService/RemoveDomain", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let addDomain = Connect.MethodSpec(name: "AddDomain", service: "dnsapi.v1.DnsService", type: .unary)
            public static let getDomain = Connect.MethodSpec(name: "GetDomain", service: "dnsapi.v1.DnsService", type: .unary)
            public static let removeDomain = Connect.MethodSpec(name: "RemoveDomain", service: "dnsapi.v1.DnsService", type: .unary)
        }
    }
}
